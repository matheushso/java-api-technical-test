openapi: "3.0.0"
info:
  version: "1.0.0"
  title: People and Addresses Registration API
  description: API for managing people and addresses registration

paths:
  /persons:
    get:
      tags:
        - persons
      summary: List all registered persons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
    post:
      tags:
        - persons
      summary: Create a new person
      requestBody:
        description: Person object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"

  /persons/{id}:
    get:
      tags:
        - persons
      summary: Get a person by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the person to retrieve
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
    put:
      tags:
        - persons
      summary: Update principal address.
      parameters:
        - name: id
          in: path
          description: ID of the address to update.
          required: true
          schema:
            type: integer
        - name: isPrincipalAddress
          in: query
          description: Indicates whether the address is the principal one.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Address updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          description: Address not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No Address was found to Person ID 1

  /addresses:
    get:
      tags:
        - addresses
      summary: List all registered addresses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
    post:
      tags:
        - addresses
      summary: Create a new address
      requestBody:
        description: Address object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"

  /addresses/{personId}:
    get:
      tags:
        - addresses
      summary: Get all addresses for a person by their ID
      parameters:
        - in: path
          name: personId
          required: true
          schema:
            type: integer
          description: ID of the person whose addresses will be retrieved
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"

components:
  schemas:
    Person:
      type: object
      required:
        - name
        - dateBirth
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Name of person
        dateBirth:
          type: string
          example: 01/01/2000
    Address:
      type: object
      required:
        - address
        - zipCode
        - number
        - city
        - principalAddress
        - person
      properties:
        id:
          type: integer
          format: int64
          example: 1
        address:
          type: string
          example: Address of person
        zipCode:
          type: string
          example: 12345-678
        number:
          type: integer
          format: int64
          example: 123
        city:
          type: string
          example: City
        principalAddress:
          type: boolean
          example: false
        person:
          $ref: "#/components/schemas/Person"